-- Índices estratégicos
CREATE INDEX IF NOT EXISTS IDX_CERTIFICADO_HASH ON TB_CERTIFICADO(CD_HASH);
CREATE INDEX IF NOT EXISTS IDX_FEEDBACK_NOTA ON TB_FEEDBACK(VL_NOTA);
CREATE INDEX IF NOT EXISTS IDX_ATIVIDADE_DATAS ON TB_ATIVIDADE(DT_INICIO, DT_FIM);

-- Consulta 1: Certificados por atividade (intermediária)
SELECT 
    a.DS_TITULO AS atividade,
    COUNT(c.ID_CERTIFICADO) AS certificados_emitidos,
    COUNT(DISTINCT ap.ID_PARTICIPANTE) AS total_participantes
FROM 
    TB_ATIVIDADE a
LEFT JOIN TB_CERTIFICADO c ON a.ID_ATIVIDADE = c.ID_ATIVIDADE
LEFT JOIN RL_ATIVIDADE_PARTICIPANTE ap ON a.ID_ATIVIDADE = ap.ID_ATIVIDADE
GROUP BY a.ID_ATIVIDADE, a.DS_TITULO;

-- Consulta 2: Feedbacks (avançada)
WITH media_geral AS (
    SELECT AVG(VL_NOTA) AS media FROM TB_FEEDBACK
)
SELECT 
    p.NM_PARTICIPANTE,
    COUNT(f.ID_FEEDBACK) AS total_feedbacks,
    ROUND(AVG(f.VL_NOTA), 1) AS media_notas,
    CASE 
        WHEN AVG(f.VL_NOTA) > (SELECT media FROM media_geral) THEN 'Acima da média'
        ELSE 'Abaixo da média'
    END AS classificacao
FROM 
    TB_PARTICIPANTE p
LEFT JOIN TB_FEEDBACK f ON p.ID_PARTICIPANTE = f.ID_PARTICIPANTE
GROUP BY p.ID_PARTICIPANTE, p.NM_PARTICIPANTE;

-- Consulta 3: Relatório completo de atividades (avançada)
SELECT 
    a.DS_TITULO AS atividade,
    STRING_AGG(DISTINCT i.NM_INSTRUTOR, ', ') AS instrutores,
    STRING_AGG(DISTINCT p.NM_PARCEIRO, ', ') AS parceiros,
    COUNT(DISTINCT ap.ID_PARTICIPANTE) AS participantes,
    COUNT(f.ID_FEEDBACK) AS total_feedbacks,
    ROUND(AVG(f.VL_NOTA), 1) AS avaliacao_media
FROM 
    TB_ATIVIDADE a
LEFT JOIN RL_ATIVIDADE_INSTRUTOR ai ON a.ID_ATIVIDADE = ai.ID_ATIVIDADE
LEFT JOIN TB_INSTRUTOR i ON ai.ID_INSTRUTOR = i.ID_INSTRUTOR
LEFT JOIN RL_ATIVIDADE_PARCEIRO ar ON a.ID_ATIVIDADE = ar.ID_ATIVIDADE
LEFT JOIN TB_PARCEIRO p ON ar.ID_PARCEIRO = p.ID_PARCEIRO
LEFT JOIN RL_ATIVIDADE_PARTICIPANTE ap ON a.ID_ATIVIDADE = ap.ID_ATIVIDADE
LEFT JOIN TB_FEEDBACK f ON a.ID_ATIVIDADE = f.ID_ATIVIDADE
GROUP BY a.ID_ATIVIDADE, a.DS_TITULO;