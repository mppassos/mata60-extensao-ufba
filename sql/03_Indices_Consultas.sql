-- Índices
CREATE INDEX IF NOT EXISTS IDX_TB_ATIVIDADE_DATAS ON TB_ATIVIDADE(DT_INICIO, DT_FIM);
CREATE INDEX IF NOT EXISTS IDX_TB_CERTIFICADO_HASH ON TB_CERTIFICADO(CD_HASH);
CREATE INDEX IF NOT EXISTS IDX_TB_FEEDBACK_NOTA ON TB_FEEDBACK(CD_NOTA);

-- Consulta 1: Certificados por atividade
SELECT 
  a.DS_TITULO AS DS_ATIVIDADE,
  COUNT(c.ID_CERTIFICADO) AS QT_CERTIFICADOS_EMITIDOS,
  COUNT(DISTINCT rap.ID_PARTICIPANTE) AS QT_PARTICIPANTES
FROM TB_ATIVIDADE a
LEFT JOIN TB_CERTIFICADO c ON a.ID_ATIVIDADE = c.ID_ATIVIDADE
LEFT JOIN RL_ATIVIDADE_PARTICIPANTE rap ON a.ID_ATIVIDADE = rap.ID_ATIVIDADE
GROUP BY a.ID_ATIVIDADE, a.DS_TITULO;

-- Consulta 2: Feedbacks
WITH media_geral AS (
  SELECT AVG(f.CD_NOTA)::numeric AS media
  FROM TB_FEEDBACK f
)
SELECT
  p.NM_PARTICIPANTE,
  COUNT(f.ID_FEEDBACK) AS QT_FEEDBACKS,
  ROUND(AVG(f.CD_NOTA)::numeric, 1) AS VL_MEDIA_NOTA,
  CASE
    WHEN AVG(f.CD_NOTA) > (SELECT media FROM media_geral) THEN 'Acima da média'
    ELSE 'Abaixo da média'
  END AS DS_CLASSIFICACAO
FROM TB_PARTICIPANTE p
LEFT JOIN TB_FEEDBACK f USING (ID_PARTICIPANTE)
GROUP BY p.ID_PARTICIPANTE, p.NM_PARTICIPANTE;

-- Consulta 3: Relatório completo de atividades
SELECT
  a.DS_TITULO AS DS_ATIVIDADE,
  COALESCE(ins.instrutores, '')       AS NM_INSTRUTORES,
  COALESCE(par.parceiros, '')         AS NM_PARCEIROS,
  COALESCE(rap.count_part, 0)        AS QT_PARTICIPANTES,
  COALESCE(fb.count_fb, 0)           AS QT_FEEDBACKS,
  COALESCE(fb.avg_nota, 0)::numeric(5,1) AS VL_MEDIA_AVALIACAO
FROM TB_ATIVIDADE a

LEFT JOIN (
  SELECT ID_ATIVIDADE, STRING_AGG(DISTINCT NM_INSTRUTOR, ', ' ORDER BY NM_INSTRUTOR) AS instrutores
  FROM RL_ATIVIDADE_INSTRUTOR ri
  JOIN TB_INSTRUTOR i USING (ID_INSTRUTOR)
  GROUP BY ID_ATIVIDADE
) ins USING (ID_ATIVIDADE)

LEFT JOIN (
  SELECT ID_ATIVIDADE, STRING_AGG(DISTINCT NM_PARCEIRO, ', ' ORDER BY NM_PARCEIRO) AS parceiros
  FROM RL_ATIVIDADE_PARCEIRO rp
  JOIN TB_PARCEIRO p USING (ID_PARCEIRO)
  GROUP BY ID_ATIVIDADE
) par USING (ID_ATIVIDADE)

LEFT JOIN (
  SELECT ID_ATIVIDADE, COUNT(ID_PARTICIPANTE) AS count_part
  FROM RL_ATIVIDADE_PARTICIPANTE
  GROUP BY ID_ATIVIDADE
) rap USING (ID_ATIVIDADE)

LEFT JOIN (
  SELECT 
    f.ID_ATIVIDADE,
    COUNT(f.ID_FEEDBACK) AS count_fb,
    AVG(f.CD_NOTA)::numeric AS avg_nota
  FROM TB_FEEDBACK f
  GROUP BY f.ID_ATIVIDADE
) fb USING (ID_ATIVIDADE);

-- Consulta 4: Total de atividades por tipo
SELECT 
  t.DS_TP_ATIVIDADE,
  COUNT(a.ID_ATIVIDADE) AS QT_ATIVIDADES
FROM TB_ATIVIDADE a
JOIN TB_TP_ATIVIDADE t USING (ID_TP_ATIVIDADE)
GROUP BY t.DS_TP_ATIVIDADE
ORDER BY QT_ATIVIDADES DESC;