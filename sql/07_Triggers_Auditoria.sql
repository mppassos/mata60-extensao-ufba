-- Tabela de auditoria
CREATE TABLE TA_AUDITORIA_LOG (
    ID_AUDITORIA SERIAL PRIMARY KEY,
    NM_TABELA TEXT,
    TP_OPERACAO CHAR(1), -- I, U, D
    DH_OPERACAO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    NM_USUARIO_BD TEXT DEFAULT SESSION_USER,
    NM_TERMINAL TEXT DEFAULT inet_client_addr(),
    NM_USUARIO_APLICACAO TEXT,
    DADOS_ANTIGOS JSONB,
    DADOS_NOVOS JSONB
);

-- Trigger Function
CREATE OR REPLACE FUNCTION FC_AUDITA_TB_PARTICIPANTE()
RETURNS TRIGGER AS $$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    INSERT INTO TA_AUDITORIA_LOG (
      NM_TABELA, TP_OPERACAO, NM_USUARIO_APLICACAO, DADOS_NOVOS
    ) VALUES (
      TG_TABLE_NAME, 'I', current_setting('application_name'), row_to_json(NEW)
    );

  ELSIF (TG_OP = 'UPDATE') THEN
    INSERT INTO TA_AUDITORIA_LOG (
      NM_TABELA, TP_OPERACAO, NM_USUARIO_APLICACAO, DADOS_ANTIGOS, DADOS_NOVOS
    ) VALUES (
      TG_TABLE_NAME, 'U', current_setting('application_name'),
      row_to_json(OLD), row_to_json(NEW)
    );
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger associada Ã  tabela
CREATE TRIGGER TG_A_IU_TB_PARTICIPANTE_LOG
AFTER INSERT OR UPDATE ON TB_PARTICIPANTE
FOR EACH ROW EXECUTE FUNCTION FC_AUDITA_TB_PARTICIPANTE();
